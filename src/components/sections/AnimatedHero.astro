---
import ScrollTrigger from '../shared/ScrollTrigger.astro';
import ScrollJack from '../shared/ScrollJack.astro';
import ScrollIndicator from '../shared/ScrollIndicator.astro';

interface Props {
  title?: string;
  subtitle?: string;
  animation?: "circles" | "widgets";
  debug?: boolean;
}

const {
  title = "Welcome to the Future",
  subtitle = "Scroll down to explore",
  animation = "circles", 
  debug = false
} = Astro.props;

// Determine animation path based on the selected animation
const animationPath = `/animations/${animation}.json`;
---

<section id="hero-section" class="animated-hero">
  <ScrollJack targetSectionId="hero-section" />
  
  <div class="hero-content">
    <div class="hero-text">
      <h1 class="hero-title reveal-element">{title}</h1>
      <p class="hero-subtitle reveal-element">{subtitle}</p>
    </div>
    
    <div class="animation-container">
      <ScrollTrigger 
        animationPath={animationPath}
        triggerElement="#hero-section"
        scrub={true}
        pin={true}
        markers={debug}
        debug={debug}
        onEnter="hero-animation-started"
        onLeave="hero-animation-completed"
        frameByFrame={true}
        autoplay={false}
        id="hero-animation"
      />
    </div>
  </div>
  
  <ScrollIndicator text="Scroll to animate" showAfterAnimation={false} heroOnly={true} />
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Add scroll-locked class to body initially
    document.body.classList.add('scroll-locked');
    
    // Get the reveal elements
    const revealElements = document.querySelectorAll('.reveal-element');
    
    // Add animation classes initially
    setTimeout(() => {
      revealElements.forEach((el, index) => {
        setTimeout(() => {
          el.classList.add('reveal-active');
        }, index * 300); // Staggered reveal
      });
    }, 500);
    
    // Track animation progress
    let animationComplete = false;
    
    // Get the scroll trigger animation instance
    let heroAnimation = null;
    const scrollTriggerElement = document.querySelector('#hero-animation');
    
    if (scrollTriggerElement && scrollTriggerElement.animation) {
      heroAnimation = scrollTriggerElement.animation;
    } else {
      // Wait for animation to be initialized
      document.addEventListener('animation-loaded', (e) => {
        if (e.detail.element.id === 'hero-animation') {
          heroAnimation = e.detail.animation;
          console.log('Hero animation loaded and ready');
        }
      });
    }
    
    // Listen for animation completion
    document.addEventListener('hero-animation-completed', () => {
      console.log('Hero animation completed');
      animationComplete = true;
      
      // Remove scroll-locked class from body
      document.body.classList.remove('scroll-locked');
      
      // Send a custom event to notify other components
      const event = new CustomEvent('animation-complete', {
        bubbles: true
      });
      
      const heroSection = document.getElementById('hero-section');
      if (heroSection) {
        heroSection.dispatchEvent(event);
      }
    });
    
    // Listen for scroll-jack events to control animation frame-by-frame
    const heroSection = document.getElementById('hero-section');
    if (heroSection) {
      heroSection.addEventListener('scroll-jack-step', (e) => {
        if (!heroAnimation) return;
        
        const { direction, delta } = e.detail;
        const totalFrames = heroAnimation.totalFrames || 100;
        const stepSize = Math.max(1, Math.floor(delta / 20)); // Convert wheel delta to reasonable frame steps
        
        let newFrame = heroAnimation.currentFrame || 0;
        
        if (direction === 'down') {
          newFrame = Math.min(newFrame + stepSize, totalFrames);
        } else {
          newFrame = Math.max(newFrame - stepSize, 0);
        }
        
        // Update the animation frame
        heroAnimation.goToFrame(newFrame);
      });
      
      // Listen for scroll-jack progress events
      heroSection.addEventListener('scroll-jack-progress', (e) => {
        if (!heroAnimation) return;
        
        const { progress } = e.detail;
        const totalFrames = heroAnimation.totalFrames || 100;
        const targetFrame = Math.floor(progress * totalFrames);
        
        // Update animation frame based on progress
        heroAnimation.goToFrame(targetFrame);
        
        // If we're at the end of the animation, mark as complete
        if (progress >= 0.95 && !animationComplete) {
          animationComplete = true;
          
          // Remove scroll-locked class from body
          document.body.classList.remove('scroll-locked');
          
          // Dispatch animation completed event
          const completeEvent = new CustomEvent('hero-animation-completed', {
            bubbles: true,
            detail: { element: scrollTriggerElement }
          });
          document.dispatchEvent(completeEvent);
        }
      });
    }
  });
</script>

<style>
  .animated-hero {
    position: relative;
    height: 100vh;
    width: 100%;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    background-color: #050505;
    scroll-snap-align: start;
    z-index: 10;
  }
  
  .hero-content {
    position: relative;
    z-index: 20;
    text-align: center;
    max-width: 800px;
    padding: 2rem;
  }
  
  .hero-text {
    transition: opacity 0.5s ease;
  }
  
  .hero-title {
    font-size: clamp(2rem, 5vw, 4rem);
    margin-bottom: 1rem;
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }
  
  .hero-subtitle {
    font-size: clamp(1rem, 2vw, 1.5rem);
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.8s ease, transform 0.8s ease;
    transition-delay: 0.2s;
  }
  
  .reveal-element.reveal-active {
    opacity: 1;
    transform: translateY(0);
  }
  
  .animation-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
  }
  
  @media (max-width: 768px) {
    .hero-content {
      padding: 1rem;
    }
  }
</style> 