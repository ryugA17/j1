---
// src/components/sections/OperationsExperience.astro
// import { Image } from 'astro:assets'; // Not needed if images are in /public
// import { Fragment } from 'astro:components'; // No longer needed if Fragment usage is removed

// Define the structure for each feature
interface Feature {
  id: string;
  navTitle: string;
  title: string;
  description: string;
  imageName: string;
}

const features: Feature[] = [
  {
    id: "click-ops",
    navTitle: "Powerful click-ops",
    title: "Quickly see what matters",
    description: "The new Aerospike Cloud UI combines operations, analytics, and organizational management in a single interface.",
    imageName: "/images/1.png" 
  },
  {
    id: "rapid-deployment",
    navTitle: "Rapid deployment",
    title: "Optimize cost and performance for each workload",
    description: "Scale vertically or horizontally, with full control over instance types, replication settings and storage strategies.",
    imageName: "/images/2.png"
  },
  {
    id: "api-automation",
    navTitle: "API automation",
    title: "Automate cluster management",
    description: "Provision, manage, and scale clusters via REST API or Terraformâ€”no fingers on keyboards.",
    imageName: "/images/3.png"
  },
  {
    id: "simplified-upgrades",
    navTitle: "Simplified upgrades",
    title: "Seamless, Zero-Downtime Upgrades",
    description: "Upgrade your clusters with no disruption to your applications. Our managed service handles the complexities of the upgrade process, ensuring a smooth transition to the latest versions and features.",
    imageName: "/images/4.png"
  },
  {
    id: "flexible-scaling",
    navTitle: "Flexible scaling",
    title: "Scale On-Demand with Predictable Performance",
    description: "Easily adjust your cluster resources up or down to meet fluctuating demands. Aerospike Cloud provides robust tools for scaling your database, ensuring you only pay for what you need while maintaining optimal performance.",
    imageName: "/images/5.png"
  },
  {
    id: "low-latency",
    navTitle: "Low latency architecture",
    title: "Experience low-latency, secure connectivity",
    description: "Minimize latency with direct network paths and dedicated subnetsâ€”configure directional access and IP space.",
    imageName: "/images/6.png"
  }
];

// Content for the new section, adapted from TimeTovibe.astro
// const timeToVibeCodeSnippet = ` ... `; // No longer needed

interface TimeToVibeValueProp {
  iconImageName?: string; // Path to icon image
  title: string;
  description: string;
}

interface TimeToVibeColumnDetail {
  mainTitle: string;
  props: TimeToVibeValueProp[];
  isButtonColumn?: boolean;
}

const timeToVibeColumns: TimeToVibeColumnDetail[] = [
  {
    mainTitle: "Your secret weapon for every new project",
    props: [
      { title: "No sharding and no surprises", description: "No GC pauses. No jittery latencies. And no shards to rebalance at 2 a.m.", iconImageName: "/images/p1.png" },
      { title: "The last database you\'ll ever need", description: "With ultra low latency, powerful expressions, and rich data types, suddenly every problem starts to look like a nail. And it\'s hammer time.", iconImageName: "/images/p2.png" }
    ]
  },
  {
    mainTitle: "Helps simplify distributed systems",
    props: [
      { title: "Rip out complexity", description: "Flatten your data stack into one layer for both hot data and reliable long-term storage.", iconImageName: "/images/p3.png" },
      { title: "Retire home-rolled locks", description: "External locks can cause headaches at scaleâ€”replace them with atomic, in-database, distributed transactions.", iconImageName: "/images/p4.png" }
    ]
  },
  {
    mainTitle: "Native support for high-performance languages",
    props: [
      { title: "First-party support for high-performance languages like Go, Rust, Node.js, C#, and Java.", description: "(And everyone\'s favorite esolow one ðŸ˜‰)" }
    ],
    isButtonColumn: true
  }
];

const timeToVibeIconSvg = `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 10C4 8.89543 4.89543 8 6 8H7V7C7 4.79086 8.79086 3 11 3H13C15.2091 3 17 4.79086 17 7V8H18C19.1046 8 20 8.89543 20 10V18C20 19.1046 19.1046 20 18 20H6C4.89543 20 4 19.1046 4 18V10ZM6 10V18H18V10H6ZM15 8V7C15 5.89543 14.1046 5 13 5H11C9.89543 5 9 5.89543 9 7V8H15Z" fill="currentColor"/></svg>`;

---

<section class="operations-experience-section font-sans">
  <div class="container mx-auto main-container">
    <h2 class="section-title">A fresh operations experience</h2>
    
    <div class="content-layout">
      {/* Left Navigation - DESKTOP ONLY */} 
      <div class="nav-column">
        <nav id="ops-nav-desktop" class="ops-navigation">
          {features.map((feature, index) => (
            <button 
              data-target={`content-${feature.id}`}
              class:list={["ops-nav-item", { 'is-active': index === 0 }]}
            >
              <span class="indicator"></span>
              <span class="nav-text">{feature.navTitle}</span>
            </button>
          ))}
        </nav>
      </div>
      
      {/* Right Content Area - Houses mobile dropdown and content panels */} 
      <div class="content-column">
        {/* Mobile Dropdown - MOBILE ONLY */} 
        <select id="ops-select-mobile" class="ops-select-mobile">
          {/* Options will be populated by JavaScript */} 
        </select>

        {/* Content Panels - Shared between desktop and mobile, visibility controlled by JS */} 
        {features.map((feature, index) => (
          <div 
            id={`content-${feature.id}`} 
            class:list={[
              "ops-content-panel", 
              { 'is-active': index === 0 } // For desktop initial active state
              // 'is-selected-mobile' will be added by JS for mobile
            ]}
            role="tabpanel" 
            aria-labelledby={index === 0 ? `trigger-${feature.id}` : undefined} // If using actual tabs/accordion roles
          >
            <div class="panel-image-area">
              <img src={feature.imageName} alt={feature.title} class="panel-image" loading="lazy" />
            </div>
            <div class="panel-text-content">
              <h3 class="panel-title">{feature.title}</h3>
              <p class="panel-description">{feature.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<script define:vars={{ features }}>
  document.addEventListener('DOMContentLoaded', () => {
    const desktopNavItems = document.querySelectorAll('.ops-nav-item');
    const contentPanels = document.querySelectorAll('.ops-content-panel');
    const mobileSelect = document.getElementById('ops-select-mobile');

    // --- Populate Mobile Dropdown ---
    if (mobileSelect && features && features.length > 0) {
      features.forEach((feature) => { // 'index' argument removed as it's not used for this logic
        if (feature.id === "click-ops") {
          return; // Skip "Powerful click-ops"
        }
        const option = document.createElement('option');
        option.value = feature.id;
        option.textContent = feature.navTitle;
        if (feature.id === "rapid-deployment") {
          option.selected = true; // Set "Rapid deployment" as selected
        }
        mobileSelect.appendChild(option);
      });

      // After populating, if on mobile, ensure the correct panel is shown.
      // This also covers the initial load scenario for mobile.
      if (window.innerWidth <= 768) {
        // Clear any existing mobile-selected states first to ensure a clean state
        contentPanels.forEach(panel => panel.classList.remove('is-selected-mobile'));
        handleMobileSelection(); // This will show the panel for 'rapid-deployment' or the first available option
      }
    }

    // --- Desktop Navigation Logic --- (This part remains unchanged)
    desktopNavItems.forEach(item => {
      item.addEventListener('click', () => {
        const targetId = item.getAttribute('data-target');
        desktopNavItems.forEach(nav => nav.classList.remove('is-active'));
        item.classList.add('is-active');

        contentPanels.forEach(panel => {
          if (panel.id === targetId) {
            panel.classList.add('is-active');
          } else {
            panel.classList.remove('is-active');
          }
        });
      });
    });

    // --- Mobile Dropdown Logic --- (This function definition remains unchanged)
    function handleMobileSelection() {
      if (!mobileSelect) return;
      const selectedId = mobileSelect.value;
      contentPanels.forEach(panel => {
        if (panel.id === `content-${selectedId}`) {
          panel.classList.add('is-selected-mobile');
        } else {
          panel.classList.remove('is-selected-mobile');
        }
      });
    }

    if (mobileSelect) {
      mobileSelect.addEventListener('change', handleMobileSelection);
      // The block that was previously here for initial mobile panel setup:
      // e.g., if (features && features.length > 0) { ... panel.classList.add('is-selected-mobile') ... }
      // is now removed. The logic for initial mobile display is handled after 
      // the dropdown population (within the 'if (window.innerWidth <= 768)' block above).
    }
  });
</script>

<style>
  /* Base font */
  .font-sans {
    font-family: "Helvetica Now Display", system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }

  .operations-experience-section {
    background-color: var(--color-background, #ffffff);
    padding: 80px 0;
  }

  .main-container {
    max-width: 1280px;
    padding-left: 1rem;
    padding-right: 1rem;
  }

  .section-title {
    font-family: "Helvetica Now Display", sans-serif;
    font-size: clamp(2.2rem, 5vw, 3rem);
    font-weight: 500;
    color: var(--color-foreground, #1a1a1a);
    margin-bottom: 48px;
    text-align: center;
  }

  /* Desktop Layout */
  .content-layout {
    display: flex;
    gap: 50px;
    align-items: flex-start;
    position: relative;
    top: 120px;
    z-index: 10;
  }

  .nav-column { /* Desktop Nav Column */
    width: 25%;
    flex-shrink: 0;
    position: relative;
    top: 0px;
  }

  .ops-navigation { /* Desktop Nav List */
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .ops-nav-item { /* Desktop Nav Button */
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 8px 0;
    text-align: left;
    cursor: pointer;
    position: relative;
  }
  .ops-nav-item .indicator {
    width: 3px;
    height: 20px;
    background-color: transparent;
    margin-right: 16px;
    transition: background-color 0.2s ease;
    border-radius: 2px;
  }
  .ops-nav-item .nav-text {
    font-family: "Helvetica Now Display", sans-serif;
    font-size: clamp(0.95rem, 2vw, 1.05rem);
    color: var(--color-muted-foreground, #575757);
    font-weight: 400;
    transition: color 0.2s ease, font-weight 0.2s ease;
  }
  .ops-nav-item.is-active .indicator {
    background-color: var(--color-foreground, #1a1a1a);
  }
  .ops-nav-item.is-active .nav-text {
    color: var(--color-foreground, #1a1a1a);
    font-weight: 500;
  }
  .ops-nav-item:not(.is-active):hover .nav-text {
    color: var(--color-foreground, #1a1a1a);
  }
  .ops-nav-item:not(.is-active):hover .indicator {
    background-color: var(--color-muted, #b4b4b4);
  }

  .content-column {
    width: 75%;
  }

  .ops-select-mobile {
    display: none; /* Hidden on desktop */
  }

  .ops-content-panel { /* Shared styles for content panel */
    background-color: var(--color-accent, #F9F9F7); /* Default bg for desktop */
    border-radius: 20px;
    padding: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.06);
    display: none; /* Hidden by default, shown by .is-active (desktop) or .is-selected-mobile (mobile) */
    gap: 10px;
    align-items: flex-start;
    height: 440px;
    width: 100%;
    max-width: 1070px;
    overflow-y: auto;
  }
  .ops-content-panel.is-active { /* Desktop: Show active panel */
    display: flex;
    flex-direction: row-reverse; /* Text on left, image on right */
  }

  .panel-text-content {
    width: 40%;
    flex-shrink: 0;
  }
  .panel-title {
    font-family: "Helvetica Now Display", sans-serif;
    font-size: clamp(1.5rem, 3.5vw, 2rem);
    font-weight: 500;
    color: var(--color-foreground, #1a1a1a);
    margin-bottom: 16px;
    line-height: 1.3;
  }
  .panel-description {
    font-family: "Helvetica Now Display", sans-serif;
    font-size: clamp(0.9rem, 2vw, 1rem);
    color: var(--color-muted-foreground, #393939);
    line-height: 1.6;
  }
  .panel-image-area {
    width: 60%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .panel-image {
    width: 100%;
    height: auto;
    max-height: 390px;
    border-radius: 12px;
    object-fit: contain;
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .content-layout {
      position: static; /* Override desktop sticky */
      flex-direction: column;
      gap: 16px; /* Gap between dropdown and content panel */
    }
    .nav-column { /* Hide desktop nav */
      display: none;
    }
    .content-column {
      width: 100%;
    }

    .ops-select-mobile {
      display: block !important; /* Show on mobile */
      width: 100%;
      padding: 12px 16px;
      font-family: "Helvetica Now Display", sans-serif;
      font-size: 1rem;
      font-weight: 500;
      color: var(--color-foreground, #1a1a1a);
      background-color: #051028; /* Dark blue/black like accordion trigger */
      color: white;
      border: 1px solid var(--color-border, #b4b4b4);
      border-radius: 99px; /* Pill shape */
      appearance: none; /* Remove default system appearance */
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23ffffff' width='18px' height='18px'%3E%3Cpath d='M7 10l5 5 5-5H7z'/%3E%3C/svg%3E"); /* Custom arrow */
      background-repeat: no-repeat;
      background-position: right 16px center;
      cursor: pointer;
    }
    .ops-select-mobile:focus {
      outline: none;
      border-color: var(--color-primary, #fdec2f);
      box-shadow: 0 0 0 2px rgba(253,236,47,0.5);
    }
    
    .ops-content-panel {
      display: none; /* Ensure all are hidden initially on mobile before JS selects one */
      flex-direction: column;
      height: auto;
      width: 100%;
      max-width: 100%;
      box-shadow: none;
      overflow-y: visible;
      margin-top: 0; /* Will be controlled by .is-selected-mobile or direct adjacent styling */
       /* Styling for the mobile "card" look will be on .is-selected-mobile */
      background-color: transparent; /* Panel itself is transparent, card styling on .is-selected-mobile */
      border: none; /* Remove default panel border/bg for mobile if card style is applied by .is-selected-mobile */
      padding: 0;
    }

    .ops-content-panel.is-active { /* Desktop class should not force display on mobile */
        display: none !important; 
    }

    .ops-content-panel.is-selected-mobile {
      display: flex !important; /* Show selected panel */
      background-color: var(--color-accent, #F9F9F7); /* Accordion card background */
      border: 2px dotted #0077FF; /* Blue dotted border */
      border-radius: 20px;
      padding: 20px; /* Padding for the card */
      margin-top: 16px; /* Space below dropdown */
       /* Ensure stacking and sizing are correct */
      height: auto; /* Override desktop fixed height */
      gap: 16px; /* Space between image and text content on mobile */
    }

    .ops-content-panel.is-selected-mobile .panel-image-area {
      order: 1;
      width: 100%;
    }
    .ops-content-panel.is-selected-mobile .panel-text-content {
      order: 2;
      width: 100%;
    }
    .ops-content-panel.is-selected-mobile .panel-image {
      max-height: 280px;
    }
    .ops-content-panel.is-selected-mobile .panel-title {
      font-size: clamp(1.3rem, 4vw, 1.6rem);
    }
    .ops-content-panel.is-selected-mobile .panel-description {
      font-size: clamp(0.85rem, 2.5vw, 0.95rem);
    }
  }

  .hidden {
    display: none !important;
  }
</style> 

<div class="grid-accent-section">
  <div class="ops-content-wrapper">
    <p class="ops-subtitle">DEVELOPERS & ARCHITECTS</p>
    <h2 class="ops-main-heading">Accelerated time-to-vibe</h2>

    <img src="/images/Code Panel.png" alt="Code Panel Example" class="ops-code-panel-image" />

    <div class="ops-value-props-grid">
      {timeToVibeColumns.map(column => (
        <div class="ops-value-prop-column">
          <h3>{column.mainTitle}</h3>
          {column.props.map(prop => (
            <div class="ops-prop-item">
              <div class="ops-prop-icon">
                {prop.iconImageName ? (
                  <img src={prop.iconImageName} alt={`${prop.title} icon`} />
                ) : (
                  <!-- Default or empty if no image, current behavior is empty for 3rd col prop -->
                  <span class="ops-no-icon-placeholder"></span>
                )}
              </div>
              <div class="ops-prop-text">
                <h4>{prop.title}</h4>
                <p>{prop.description}</p>
              </div>
            </div>
          ))}
          {column.isButtonColumn && (
            <button class="ops-start-building-button">
              
              <img src="/images/p5.png" alt="Build icon" class="ops-button-icon" />
            </button>
          )}
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  .grid-accent-section {
    width: 1439px;
    height: 1383px; /* Fixed height as requested */
    padding-top: 120px;
    padding-right: 59px;
    padding-bottom: 200px;
    padding-left: 59px;
    background-image: url('/images/grid-effect.png'), linear-gradient(177.41deg, #0D1B32 2.11%, #000000 92.51%);
    background-repeat: no-repeat, no-repeat;
    background-position: center center, center center;
    background-size: cover, cover;
    color: #ffffff;
    font-family: "Helvetica Now Display", sans-serif;
    margin: 60px auto; /* Centering the section if viewport is wider */
    position: relative;
    display: flex; /* For centering content-wrapper */
    justify-content: center;
    overflow: hidden; /* Prevent content spill with fixed height */
  }

  

  .ops-content-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 1100px; /* Max width for the content */
    padding: 0 20px; /* Padding inside the content area */
    box-sizing: border-box;
    z-index: 1; /* Ensure content is above pseudo-elements */
  }

  .ops-subtitle {
    font-size: 0.875rem; /* 14px */
    font-weight: 500;
    letter-spacing: 0.05em;
    margin-bottom: 16px; /* Space below subtitle */
    opacity: 0.8;
    text-align: center;
  }

  .ops-main-heading {
    font-size: clamp(2.5rem, 5vw, 3.5rem); /* Responsive font size */
    font-weight: 500;
    margin-bottom: 40px; /* Space below main heading */
    text-align: center;
  }

  .ops-code-panel-image {
    width: 764px;
    height: 524px;
    border-radius: 14px;
    object-fit: cover; /* or contain, depending on how image should scale */
    margin-bottom: 60px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
  }

  .ops-value-props-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 40px; 
    width: 100%;
    margin-top: 20px; 
    align-items: stretch; /* Make columns in a row equal height */
  }

  .ops-value-prop-column {
    display: flex;
    flex-direction: column;
    gap: 24px; 
  }

  .ops-value-prop-column > h3 {
    font-size: 1.25rem; /* 20px */
    font-weight: 500;
    line-height: 1.4;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 8px;
    border-bottom: 1px dotted rgba(255,255,255,0.2);
    padding-bottom: 16px;
  }

  .ops-prop-item {
    display: flex;
    align-items: flex-start;
    gap: 16px;
  }

  .ops-prop-icon {
    flex-shrink: 0;
    width: 36px; /* Adjust as needed based on actual image size / design */
    height: 36px; /* Adjust as needed */
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    /* background-color: rgba(255,255,255,0.05); /* Removed, as image will provide visual */
  }
  .ops-prop-icon img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain; /* Or cover, depending on image aspect ratio */
  }
  .ops-no-icon-placeholder {
    /* If you want a visible placeholder for props without images */
    /* width: 24px; height: 24px; background-color: rgba(255,255,255,0.1); border-radius: 4px; */
  }
  
  .ops-prop-text h4 {
    font-size: 1rem; /* 16px */
    font-weight: 500;
    margin-bottom: 6px;
    color: #ffffff;
  }

  .ops-prop-text p {
    font-size: 0.875rem; /* 14px */
    line-height: 1.6;
    color: rgba(255, 255, 255, 0.7);
  }

  .ops-start-building-button {
    /* Change background to transparent to show the image's own background */
    background-color: transparent;
    /* Text color not needed for image-only button */
    /* color: #051028; */
    border: none;
    /* Keep border-radius in case it impacts the rendering */
    border-radius: 99px;
    /* Adjust padding to minimum around the image */
    padding: 0;
    /* Font properties not needed for image-only button */
    /* font-family: "Helvetica Now Display", sans-serif; */
    /* font-size: 0.9rem; */
    /* font-weight: 500; */
    cursor: pointer;
    transition: transform 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    /* No gap needed for single image */
    /* gap: 8px; */
    margin-top: auto;
    align-self: flex-start;
  }
  .ops-start-building-button:hover {
    /* No background color change on hover for transparent button */
    /* background-color: #CBD5E1; */
    transform: translateY(-1px);
  }
  
  .ops-button-icon {
    /* Let the image size be defined by the image file itself */
    width: auto;
    height: auto;
    /* But ensure it doesn't get too large */
    max-width: 100%;
    max-height: 100%;
  }

  /* Responsive adjustments */
  @media (max-width: 1440px) { /* Matches fixed width, adjust for fluidity */
    .grid-accent-section {
     
      width: 100vw;
      margin-left: calc(50% - 50vw);
      padding-left: 0;
      padding-right: 0;
      box-sizing: border-box;
    }
     .grid-accent-section::before {
      top: 40px; left: 15px; right: 15px; bottom: 50px;
    }
    .ops-code-panel-image {
      width: 90%; /* Make image responsive */
      max-width: 764px; /* But not larger than original */
      height: auto; /* Adjust height proportionally */
    }
  }

  @media (max-width: 1024px) {
    .ops-main-heading {
        font-size: clamp(2rem, 4vw, 3rem);
        margin-bottom: 30px;
    }
    .ops-code-panel-image {
        margin-bottom: 50px;
    }
    .ops-value-props-grid {
      grid-template-columns: 1fr; /* Stack columns */
      gap: 50px; 
    }
    .ops-value-prop-column > h3 {
      text-align: center;
    }
    .ops-start-building-button {
      align-self: center; /* Center button when columns stack */
    }
  }

  @media (max-width: 768px) {
    .grid-accent-section {
      padding-top: 60px;
      padding-left: 20px;
      padding-right: 20px;
      padding-bottom: 60px;
    }
     .grid-accent-section::before {
        top: 20px; left: 10px; right: 10px; bottom: 30px;
    }
    .ops-subtitle {
        font-size: 0.8rem;
        margin-bottom: 12px;
    }
    .ops-main-heading {
        font-size: clamp(1.8rem, 5vw, 2.5rem);
        margin-bottom: 24px;
    }
    .ops-code-panel-image {
        width: 100%;
        margin-bottom: 40px;
    }
    .ops-value-props-grid {
      gap: 40px;
    }
     .ops-value-prop-column > h3 {
        font-size: 1.1rem;
    }
    .ops-prop-text h4 {
        font-size: 0.95rem;
    }
    .ops-prop-text p {
        font-size: 0.825rem;
    }
    .ops-start-building-button {
        padding: 10px 20px;
        font-size: 0.85rem;
    }
  }

  .hidden { /* If this was from the old section and not used by the first one */
    display: none !important;
  }
</style> 