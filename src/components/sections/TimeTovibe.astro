import { Image } from 'astro:assets'; // For icons if needed

const codeSnippet = `
# Connect to Aerospike Cloud
client = aerospike.client({
  'hosts': AS_CLOUD_CLUSTER_IPS
}).connect()

# Save a Record
client.put(('user_data', 'user_profiles', MY_UUID), {
  'username': 'jvonneumann',
  'email': 'jvonneumann@ias.edu'
})

# Retrieve and print the Record
my_user = client.get(('user_data', 'user_profiles', MY_UUID))
print(f"Retrieved user:", my_user)

# TODO: write business plan... SMB
profit()
`.trim();

interface ValueProp {
  icon?: string; // Path to icon if we use actual icon files
  title: string;
  description: string;
}

interface ColumnDetail {
  mainTitle: string;
  props: ValueProp[];
  isButtonColumn?: boolean;
}

const columns: ColumnDetail[] = [
  {
    mainTitle: "Your secret weapon for every new project",
    props: [
      { title: "No sharding and no surprises", description: "No GC pauses. No jittery latencies. And no shards to rebalance at 2 a.m." },
      { title: "The last database you\'ll ever need", description: "With ultra low latency, powerful expressions, and rich data types, suddenly every problem starts to look like a nail. And it\'s hammer time." }
    ]
  },
  {
    mainTitle: "Helps simplify distributed systems",
    props: [
      { title: "Rip out complexity", description: "Flatten your data stack into one layer for both hot data and reliable long-term storage." },
      { title: "Retire home-rolled locks", description: "External locks can cause headaches at scaleâ€”replace them with atomic, in-database, distributed transactions." }
    ]
  },
  {
    mainTitle: "Native support for high-performance languages",
    props: [
      { title: "First-party support for high-performance languages like Go, Rust, Node.js, C#, and Java.", description: "(And everyone\'s favorite esolow one ðŸ˜‰)" }
    ],
    isButtonColumn: true
  }
];

const iconSvg = `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 10C4 8.89543 4.89543 8 6 8H7V7C7 4.79086 8.79086 3 11 3H13C15.2091 3 17 4.79086 17 7V8H18C19.1046 8 20 8.89543 20 10V18C20 19.1046 19.1046 20 18 20H6C4.89543 20 4 19.1046 4 18V10ZM6 10V18H18V10H6ZM15 8V7C15 5.89543 14.1046 5 13 5H11C9.89543 5 9 5.89543 9 7V8H15Z" fill="currentColor"/></svg>`; // Placeholder lock/key icon

<section class="time-to-vibe-section">
  <div class="content-wrapper">
    <p class="subtitle">DEVELOPERS & ARCHITECTS</p>
    <h2 class="main-heading">Accelerated time-to-vibe</h2>

    <div class="code-block-container">
      <div class="code-block-header">
        <span class="dot red"></span>
        <span class="dot yellow"></span>
        <span class="dot green"></span>
      </div>
      <pre><code class="language-python">{codeSnippet}</code></pre>
    </div>

    <div class="value-props-grid">
      {columns.map(column => (
        <div class="value-prop-column">
          <h3>{column.mainTitle}</h3>
          {column.props.map(prop => (
            <div class="prop-item">
              <div class="prop-icon">
                {/* Placeholder for icon - could be an <Image /> component or SVG */}
                <Fragment set:html="<!-- Icon -->" />
              </div>
              <div class="prop-text">
                <h4>{prop.title}</h4>
                <p>{prop.description}</p>
              </div>
            </div>
          ))}
          {column.isButtonColumn && (
           
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  :root {
    /* Define any component-specific CSS variables here if needed */
  }

  .time-to-vibe-section {
    width: 1439px; /* As specified */
    height: 1383px; /* As specified */
    padding-top: 120px;
    padding-right: 59px;
    padding-bottom: 200px;
    padding-left: 59px;
    /* gap: 10px; This applies to flex/grid children, not the section itself */
    background-color: #051028; /* Dark background color from theme */
    background-image: url('/images/grid-effect.png');
    background-repeat: no-repeat; /* Or repeat, depending on image */
    background-position: center center; /* Adjust as needed */
    background-size: cover; /* Adjust as needed */
    color: #ffffff;
    font-family: "Helvetica Now Display", sans-serif;
    margin: 0 auto; /* Center the section if viewport is wider */
    position: relative; /* For potential absolute positioned elements like dotted border */
    display: flex; /* To use gap for children if needed, or just for centering content-wrapper */
    justify-content: center;
    /* align-items: center; /* If content should be vertically centered */
  }

  .content-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center; /* Center content horizontally */
    width: 100%;
    max-width: 1100px; /* Max width for the actual content within the padded section */
    gap: 10px; /* This applies to direct children of content-wrapper */
  }
  
  /* Dotted border - example using pseudo-element on content-wrapper or section */
  .time-to-vibe-section::before {
    content: '';
    position: absolute;
    top: 60px; /* Half of vertical padding to inset */
    left: 30px; /* Half of horizontal padding to inset */
    right: 30px;
    bottom: 100px; /* Half of bottom padding */
    border: 2px dotted rgba(255, 255, 255, 0.2); /* Adjust color and opacity */
    border-radius: 20px; /* Match image */
    pointer-events: none; /* So it doesn't interfere with clicks */
  }


  .subtitle {
    font-size: 0.875rem; /* 14px */
    font-weight: 500;
    letter-spacing: 0.05em;
    margin-bottom: 16px;
    opacity: 0.8;
  }

  .main-heading {
    font-size: clamp(2.5rem, 5vw, 3.5rem); /* Responsive font size */
    font-weight: 700;
    margin-bottom: 40px;
    text-align: center;
  }

  .code-block-container {
    background-color: rgba(30, 41, 59, 0.8); /* Semi-transparent dark slate */
    backdrop-filter: blur(10px); /* Glassmorphism effect */
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px; /* Rounded corners from image */
    padding: 16px;
    width: 100%;
    max-width: 700px; /* Adjust as needed */
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    margin-bottom: 60px;
  }

  .code-block-header {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
    padding-left: 4px;
  }

  .code-block-header .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }
  .dot.red { background-color: #FF5F56; }
  .dot.yellow { background-color: #FFBD2E; }
  .dot.green { background-color: #27C93F; }

  .code-block-container pre {
    margin: 0;
    padding: 12px;
    background-color: rgba(15, 23, 42, 0.7); /* Darker background for code itself */
    border-radius: 8px;
    overflow-x: auto;
  }

  .code-block-container code {
    font-family: "SF Mono", "Consolas", "Liberation Mono", Menlo, Courier, monospace;
    font-size: 0.875rem; /* 14px */
    line-height: 1.6;
    color: #E2E8F0; /* Light gray/blue for code text */
  }
  /* Basic Python syntax highlighting - can be expanded or use a library */
  .code-block-container code .token.comment { color: #6A737D; font-style: italic; }
  .code-block-container code .token.keyword { color: #F97583; }
  .code-block-container code .token.string { color: #9ECBFF; }
  .code-block-container code .token.function { color: #B392F0; }
  .code-block-container code .token.number { color: #79B8FF; }


  .value-props-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 40px; /* Gap between columns */
    width: 100%;
    margin-top: 20px; /* Space above the grid */
  }

  .value-prop-column {
    display: flex;
    flex-direction: column;
    gap: 24px; /* Gap between main title and prop items / button */
  }

  .value-prop-column > h3 { /* Main title for each column */
    font-size: 1.25rem; /* 20px */
    font-weight: 500;
    line-height: 1.4;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 8px; /* Space below column title */
    border-bottom: 1px dotted rgba(255,255,255,0.2);
    padding-bottom: 16px;
  }

  .prop-item {
    display: flex;
    align-items: flex-start;
    gap: 16px;
  }

  .prop-icon {
    flex-shrink: 0;
    width: 24px; /* Adjust based on actual icon size */
    height: 24px;
    /* background-color: rgba(255,255,255,0.1); Temporary placeholder */
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #9ECBFF; /* Icon color */
  }
  .prop-icon svg { /* Assuming icons are SVGs */
    width: 18px;
    height: 18px;
  }


  .prop-text h4 { /* Sub-heading */
    font-size: 1rem; /* 16px */
    font-weight: 500;
    margin-bottom: 6px;
    color: #ffffff;
  }

  .prop-text p { /* Description */
    font-size: 0.875rem; /* 14px */
    line-height: 1.6;
    color: rgba(255, 255, 255, 0.7);
  }

  .start-building-button {
    background-color: #E2E8F0; /* Light gray/off-white */
    color: #051028; /* Dark text */
    border: none;
    border-radius: 99px; /* Pill shape */
    padding: 12px 24px;
    font-family: "Helvetica Now Display", sans-serif;
    font-size: 0.9rem; /* 14.4px */
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    margin-top: auto; /* Pushes button to bottom in flex column if needed */
    align-self: flex-start; /* Align to start of column */
  }
  .start-building-button:hover {
    background-color: #CBD5E1; /* Slightly darker on hover */
    transform: translateY(-1px);
  }
  .start-building-button svg {
    width: 16px;
    height: 16px;
    color: #051028;
  }

  /* Responsive adjustments */
  @media (max-width: 1440px) {
    .time-to-vibe-section {
      width: 100%;
      height: auto; /* Allow height to adjust */
      padding-left: 30px;
      padding-right: 30px;
      padding-bottom: 100px;
    }
  }

  @media (max-width: 1024px) {
    .time-to-vibe-section::before { /* Adjust dotted border for smaller screens */
        top: 30px;
        left: 15px;
        right: 15px;
        bottom: 50px;
    }
    .main-heading {
        font-size: clamp(2rem, 4vw, 3rem);
        margin-bottom: 30px;
    }
    .code-block-container {
        max-width: 90%;
        margin-bottom: 50px;
    }
    .value-props-grid {
      grid-template-columns: 1fr; /* Stack columns */
      gap: 50px; /* Increased gap when stacked */
    }
    .value-prop-column > h3 {
      text-align: center;
    }
    .start-building-button {
      align-self: center;
    }
  }

  @media (max-width: 768px) {
    .time-to-vibe-section {
      padding-top: 80px;
      padding-left: 20px;
      padding-right: 20px;
      padding-bottom: 60px;
    }
     .time-to-vibe-section::before { /* Adjust dotted border for smaller screens */
        top: 20px;
        left: 10px;
        right: 10px;
        bottom: 30px;
    }

    .subtitle {
        font-size: 0.8rem;
        margin-bottom: 12px;
    }
    .main-heading {
        font-size: clamp(1.8rem, 5vw, 2.5rem);
        margin-bottom: 24px;
    }
    .code-block-container {
        max-width: 100%;
        padding: 12px;
        margin-bottom: 40px;
    }
    .code-block-container code {
        font-size: 0.8rem;
    }
    .value-props-grid {
      gap: 40px;
    }
     .value-prop-column > h3 {
        font-size: 1.1rem;
    }
    .prop-text h4 {
        font-size: 0.95rem;
    }
    .prop-text p {
        font-size: 0.825rem;
    }
    .start-building-button {
        padding: 10px 20px;
        font-size: 0.85rem;
    }
  }

</style> 