---
interface Props {
  targetSectionId: string;
  duration?: number;
  easing?: string;
  onComplete?: () => void;
}

const { 
  targetSectionId,
  duration = 1000,
  easing = 'cubic-bezier(0.645, 0.045, 0.355, 1.000)'
} = Astro.props;
---

<div class="scroll-jack" data-target-section={targetSectionId} data-duration={duration} data-easing={easing}>
  <!-- This is a controller component, no visible elements -->
</div>

<script define:vars={{ targetSectionId, duration, easing }}>
document.addEventListener('DOMContentLoaded', () => {
  // Core state management
  const state = {
    isScrollLocked: true,
    isAnimating: false, // Currently processing a scroll-jack step for forward animation
    isAnimationComplete: false, // Lottie has reported completion (internal)
    initialScrollY: 0,
    allowScrolling: false, // General flag for scroll release
    sectionAnimationProgress: 0, // Current progress of the animation (0 to 1)
    targetSection: null,
    animationSteps: 100, // Total animation steps for forward scroll-jacking
    currentStep: 0,      // Current step in forward scroll-jacking (0 to animationSteps)
    forwardCompleted: false, // Flag: initial forward scroll-jack animation sequence has finished
    reverseMode: false,   // Flag: user is scrolling back up into the section for reverse animation
  };
  
  let scrollY_at_forward_anim_end = null; // Y scroll position when forward animation sequence concludes
  let scrollY_at_reverse_mode_start = 0; // Y scroll position when reverseMode is triggered
  const REVERSE_ANIM_SCROLL_RANGE = window.innerHeight * 0.8; // Scroll distance to play full reverse animation (80vh)
  const SCROLL_ENTRY_BUFFER = 10; // **REDUCED BUFFER**

  // Get references to important elements
  const targetSection = document.getElementById(targetSectionId);
  if (!targetSection) {
    console.error(`ScrollJack: Target section #${targetSectionId} not found`);
    return;
  }
  
  state.targetSection = targetSection;
  state.initialScrollY = window.scrollY;
  
  console.log(`ScrollJack: Initialized for section #${targetSectionId}`);
  
  // Main event listeners
  const setupEventListeners = () => {
    window.addEventListener('wheel', handleWheel, { passive: false });
    window.addEventListener('touchstart', handleTouchStart, { passive: true });
    window.addEventListener('touchmove', handleTouchMove, { passive: false });
    window.addEventListener('keydown', handleKeyDown, { passive: false });
    document.addEventListener('lottie-hero-animation-complete', handleLottieAnimationComplete);
    
    targetSection.addEventListener('animation-complete', () => {
      console.log('ScrollJack: Forward scroll-jack sequence complete.');
      state.allowScrolling = true;
      state.isScrollLocked = false; 
      state.forwardCompleted = true;
      targetSection.classList.add('animation-completed');
      document.body.style.overflow = '';
      document.body.style.height = '';
      
      scrollY_at_forward_anim_end = targetSection.offsetTop + targetSection.offsetHeight;
      console.log(`ScrollJack: scrollY_at_forward_anim_end set to: ${scrollY_at_forward_anim_end} (Section offsetTop: ${targetSection.offsetTop}, section offsetHeight: ${targetSection.offsetHeight})`);
      
      smoothScrollTo(scrollY_at_forward_anim_end + 30, 300); // **ADJUSTED SCROLL PAST AMOUNT**
    });

    window.addEventListener('scroll', handleReverseScrollLogic, { passive: true }); 
  };
  
  function handleReverseScrollLogic() {
    // Ensure this log is active for debugging:
    // console.log(`ScrollJack [ReverseDebug Pre-Guard]: forwardCompleted: ${state.forwardCompleted}, scrollY_at_forward_anim_end: ${scrollY_at_forward_anim_end}`);
    if (!state.forwardCompleted || scrollY_at_forward_anim_end === null) {
      return;
    }

    const rect = targetSection.getBoundingClientRect();
    const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
    const currentScrollY = Math.round(window.scrollY);
    
    // Ensure this log is active for debugging:
    console.log(`ScrollJack [ReverseDebug Tick]: currentY: ${currentScrollY}, endY: ${scrollY_at_forward_anim_end}, entryBuffer: ${SCROLL_ENTRY_BUFFER}, isVisible: ${isVisible}, reverseMode: ${state.reverseMode}, rect.top: ${rect.top.toFixed(0)}, rect.bottom: ${rect.bottom.toFixed(0)}`);

    const entryPointForReverse = scrollY_at_forward_anim_end - SCROLL_ENTRY_BUFFER;

    if (isVisible) {
      // Use <= for entryPointForReverse comparison
      if (!state.reverseMode && currentScrollY <= entryPointForReverse) { 
        console.log(`ScrollJack: Entering reverse mode. currentY (${currentScrollY}) <= entryPoint (${entryPointForReverse}).`);
        state.reverseMode = true;
        scrollY_at_reverse_mode_start = currentScrollY; 
        console.log(`ScrollJack: scrollY_at_reverse_mode_start set to: ${scrollY_at_reverse_mode_start}`);
        state.sectionAnimationProgress = 1.0;
        state.currentStep = state.animationSteps; 
        updateAnimations(1.0);
        console.log('ScrollJack: Set animation to progress 1.0 for reverse start.');
      }

      if (state.reverseMode) {
        if (currentScrollY > scrollY_at_reverse_mode_start + SCROLL_ENTRY_BUFFER) {
            console.log(`ScrollJack: Exiting reverse mode (scrolled down past start). currentY (${currentScrollY}) > reverseStart (${scrollY_at_reverse_mode_start} + buffer)`);
            state.reverseMode = false;
            state.sectionAnimationProgress = 1.0; 
            state.currentStep = state.animationSteps;
            updateAnimations(1.0);
            return;
        }

        const effectiveReverseStart = Math.min(scrollY_at_reverse_mode_start, scrollY_at_forward_anim_end - SCROLL_ENTRY_BUFFER);
        const scrolledUpDistance = effectiveReverseStart - currentScrollY;
        const reverseProgressRaw = scrolledUpDistance / REVERSE_ANIM_SCROLL_RANGE;
        
        let newAnimationProgress = 1.0 - reverseProgressRaw; 
        newAnimationProgress = Math.min(1.0, Math.max(0.0, newAnimationProgress));

        if (Math.abs(state.sectionAnimationProgress - newAnimationProgress) > 0.001) { 
            console.log(`ScrollJack [ReverseDebug InReverse]: scrolledUp: ${scrolledUpDistance.toFixed(2)}, rawP: ${reverseProgressRaw.toFixed(2)}, animP: ${newAnimationProgress.toFixed(2)}`);
            state.sectionAnimationProgress = newAnimationProgress;
            state.currentStep = Math.floor(newAnimationProgress * state.animationSteps);
            updateAnimations(newAnimationProgress);
        }
      }
    } else { 
      if (state.reverseMode) {
        if (rect.bottom <= 0 && currentScrollY < scrollY_at_reverse_mode_start) { 
          console.log('ScrollJack: Exited reverse mode (scrolled fully above section).');
          state.reverseMode = false;
          state.sectionAnimationProgress = 0.0;
          state.currentStep = 0;
          updateAnimations(0.0); 
        }
      }
    }
  }

  function updateAnimations(progress) {
    if (window.heroWidgetAnimation) {
      const totalFrames = window.heroWidgetAnimation.totalFrames || 100;
      let targetFrame = Math.floor(progress * totalFrames);
      targetFrame = Math.min(totalFrames -1, Math.max(0, targetFrame)); 
      window.heroWidgetAnimation.goToAndStop(targetFrame, true);
    }
    const circlesElement = document.querySelector('#circles-animation');
    if (circlesElement && circlesElement.animation) {
      const totalFrames = circlesElement.animation.totalFrames || 100;
      let targetFrame = Math.floor(progress * totalFrames);
      targetFrame = Math.min(totalFrames -1, Math.max(0, targetFrame)); 
      circlesElement.animation.goToFrame(targetFrame);
    }
    const progressEvent = new CustomEvent('scroll-jack-progress', {
      detail: { progress, step: Math.floor(progress * state.animationSteps), totalSteps: state.animationSteps }
    });
    targetSection.dispatchEvent(progressEvent);
  }
  
  const initializeScrollJacking = () => {
    document.body.style.overflow = 'hidden';
    document.body.style.height = '100vh'; 
    console.log('ScrollJack: Scroll locked initially');
  };
  
  // Forward animation step handlers
  function handleWheel(e) {
    if (state.forwardCompleted || !state.isScrollLocked || state.allowScrolling) return;
    const rect = targetSection.getBoundingClientRect();
    if (!(rect.top < window.innerHeight && rect.bottom > 0)) return;
    e.preventDefault();
    if (state.isAnimating) return;
    state.isAnimating = true;
    const deltaY = e.deltaY;
    if (deltaY > 0) {
      state.currentStep = Math.min(state.currentStep + 1, state.animationSteps);
    } else if (deltaY < 0) {
      state.currentStep = Math.max(state.currentStep - 1, 0);
    }
    state.sectionAnimationProgress = state.currentStep / state.animationSteps;
    updateAnimations(state.sectionAnimationProgress);
    if (state.currentStep >= state.animationSteps && !state.isAnimationComplete) {
        handleLottieAnimationComplete(); 
    }
    setTimeout(() => state.isAnimating = false, 20); 
  }
  
  let touchStartY = 0;
  function handleTouchStart(e) {
    if (state.forwardCompleted) return;
    touchStartY = e.touches[0].clientY;
  }
  
  function handleTouchMove(e) {
    if (state.forwardCompleted || !state.isScrollLocked || state.allowScrolling) return;
    const rect = targetSection.getBoundingClientRect();
    if (!(rect.top < window.innerHeight && rect.bottom > 0)) return;
    e.preventDefault();
    if (state.isAnimating) return;
    state.isAnimating = true;
    const touchY = e.touches[0].clientY;
    const deltaY = touchStartY - touchY; 
    if (Math.abs(deltaY) > 5) { 
      if (deltaY > 0) { 
        state.currentStep = Math.min(state.currentStep + 1, state.animationSteps);
      } else { 
        state.currentStep = Math.max(state.currentStep - 1, 0);
      }
      state.sectionAnimationProgress = state.currentStep / state.animationSteps;
      updateAnimations(state.sectionAnimationProgress);
      touchStartY = touchY;
    }
    if (state.currentStep >= state.animationSteps && !state.isAnimationComplete) {
        handleLottieAnimationComplete();
    }
    setTimeout(() => state.isAnimating = false, 20); 
  }
  
  function handleKeyDown(e) {
    if (state.forwardCompleted || !state.isScrollLocked || state.allowScrolling) return;
    const rect = targetSection.getBoundingClientRect();
    if (!(rect.top < window.innerHeight && rect.bottom > 0)) return;
    const scrollKeys = ['ArrowDown', 'ArrowUp', 'PageDown', 'PageUp', 'Space'];
    if (!scrollKeys.includes(e.code)) return;
    e.preventDefault();
    if (state.isAnimating) return;
    state.isAnimating = true;
    if (['ArrowDown', 'PageDown', 'Space'].includes(e.code)) {
      const increment = (e.code === 'PageDown') ? 5 : 1;
      state.currentStep = Math.min(state.currentStep + increment, state.animationSteps);
    } else if (['ArrowUp', 'PageUp'].includes(e.code)) {
      const decrement = (e.code === 'PageUp') ? 5 : 1;
      state.currentStep = Math.max(state.currentStep - decrement, 0);
    }
    state.sectionAnimationProgress = state.currentStep / state.animationSteps;
    updateAnimations(state.sectionAnimationProgress);
    if (state.currentStep >= state.animationSteps && !state.isAnimationComplete) {
        handleLottieAnimationComplete();
    }
    setTimeout(() => state.isAnimating = false, 20); 
  }
  
  function handleLottieAnimationComplete() {
    if (state.isAnimationComplete) return; 
    console.log('ScrollJack: Lottie animation considered complete.');
    state.isAnimationComplete = true; 
    const completeEvent = new CustomEvent('animation-complete', { bubbles: true });
    targetSection.dispatchEvent(completeEvent);
  }
  
  function smoothScrollTo(targetY, scrollDuration) {
    const startingY = window.scrollY;
    const diff = targetY - startingY;
    if (Math.abs(diff) < 10) return;
    let startTimestamp;
    window.requestAnimationFrame(function step(timestamp) {
      if (!startTimestamp) startTimestamp = timestamp;
      const elapsed = timestamp - startTimestamp;
      const percent = Math.min(elapsed / scrollDuration, 1);
      const easedPercent = 0.5 - 0.5 * Math.cos(percent * Math.PI); 
      window.scrollTo(0, startingY + diff * easedPercent);
      if (elapsed < scrollDuration) {
        window.requestAnimationFrame(step);
      }
    });
  }
  
  initializeScrollJacking();
  setupEventListeners();
  
  window.scrollJackAPI = {
    getState: () => ({ ...state }),
    updateAnimations: updateAnimations,
    forceForwardComplete: () => { 
        if (!state.forwardCompleted) handleLottieAnimationComplete();
    }
  };
});
</script>

<style>
  .scroll-jack { display: none; }
  :global(body.scroll-locked) {
    overflow: hidden;
  }
  :global(section.animation-completed) {
    scroll-snap-align: none; 
  }
</style> 