---
interface Props {
  src: string;
  scale?: number;
  startFrame?: number;
  endFrame?: number;
  autoplay?: boolean;
  loop?: boolean;
}

const {
  src,
  scale = 1,
  startFrame = 0,
  endFrame,
  autoplay = false,
  loop = false
} = Astro.props;
---

<div 
  class="widget-animation"
  data-animation-path={src}
  data-scale={scale}
  data-start-frame={startFrame}
  data-end-frame={endFrame || ""}
  data-autoplay={autoplay.toString()}
  data-loop={loop.toString()}
></div>

<script>
  import lottie from 'https://cdn.skypack.dev/lottie-web';
  
  document.addEventListener('DOMContentLoaded', () => {
    const animations = document.querySelectorAll('.widget-animation');
    
    animations.forEach(element => {
      const path = element.dataset.animationPath;
      const scale = parseFloat(element.dataset.scale || '1');
      const startFrame = parseInt(element.dataset.startFrame || '0', 10);
      const endFrame = element.dataset.endFrame ? parseInt(element.dataset.endFrame, 10) : null;
      const autoplay = element.dataset.autoplay === 'true';
      const loop = element.dataset.loop === 'true';
      
      if (!path) return;
      
      // Apply scale if needed
      if (scale !== 1) {
        element.style.transform = `scale(${scale})`;
        element.style.transformOrigin = 'center center';
      }
      
      const animation = lottie.loadAnimation({
        container: element,
        renderer: 'svg',
        loop: loop,
        autoplay: autoplay,
        path: path,
      });
      
      // Set start frame if not autoplay
      if (!autoplay && startFrame > 0) {
        animation.goToAndStop(startFrame, true);
      }
      
      // Store animation reference in element
      element.animation = animation;
    });
  });
</script>

<style>
  .widget-animation {
    width: 100%;
    height: 100%;
    min-height: 40px;
  }
</style> 