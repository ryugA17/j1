---
interface Props {
  text?: string;
  showAfterAnimation?: boolean;
  heroOnly?: boolean;
}

const { 
  text = "Scroll to continue", 
  showAfterAnimation = true,
  heroOnly = false
} = Astro.props;
---

<div class={`scroll-indicator ${heroOnly ? 'hero-only' : ''}`} data-show-after-animation={showAfterAnimation.toString()} data-hero-only={heroOnly.toString()}>
  <div class="scroll-indicator-text">{text}</div>
  <div class="scroll-indicator-arrow">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M12 5V19M12 19L19 12M12 19L5 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log("ScrollIndicator: Component initialized");
    
    const indicators = document.querySelectorAll('.scroll-indicator');
    indicators.forEach(indicator => {
      const showAfterAnimation = indicator.getAttribute('data-show-after-animation') === 'true';
      const heroOnly = indicator.getAttribute('data-hero-only') === 'true';
      
      if (showAfterAnimation) {
        indicator.classList.add('hidden');
        console.log("ScrollIndicator: Initially hidden, waiting for animation");
        
        // Listen for animation complete event to show the indicator
        document.addEventListener('lottie-hero-animation-complete', () => {
          console.log("ScrollIndicator: Animation complete event received");
          setTimeout(() => {
            indicator.classList.remove('hidden');
            indicator.classList.add('visible');
            console.log("ScrollIndicator: Now visible after animation");
          }, 500);
        });
      } else {
        // Show immediately if not waiting for animation
        indicator.classList.add('visible');
        console.log("ScrollIndicator: Immediately visible");
      }
      
      // Handle hero-only indicator visibility
      if (heroOnly) {
        // Show only when in viewport
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            const heroSection = document.getElementById('hero-section');
            if (heroSection && entry.isIntersecting) {
              indicator.style.opacity = '1';
            } else {
              indicator.style.opacity = '0';
            }
          });
        }, { threshold: 0.1 });
        
        const heroSection = document.getElementById('hero-section');
        if (heroSection) {
          observer.observe(heroSection);
        }
        
        // Also hide when scrolling past hero section
        window.addEventListener('scroll', () => {
          const heroSection = document.getElementById('hero-section');
          if (heroSection) {
            const heroBottom = heroSection.getBoundingClientRect().bottom;
            if (heroBottom < 0) {
              indicator.style.opacity = '0';
            } else {
              indicator.style.opacity = '1';
            }
          }
        });
      }
    });
  });
</script>

<style>
  .scroll-indicator {
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    color: var(--color-white, #ffffff);
    z-index: 10;
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  
  .scroll-indicator.visible {
    opacity: 1;
  }
  
  .scroll-indicator.hidden {
    opacity: 0;
  }
  
  /* When outside the hero section, hide the indicator */
  .scroll-indicator.hero-only:not(.in-hero-section) {
    display: none;
  }
  
  .scroll-indicator-text {
    font-size: 14px;
    margin-bottom: 8px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .scroll-indicator-arrow {
    animation: bounce 2s infinite;
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }
</style> 